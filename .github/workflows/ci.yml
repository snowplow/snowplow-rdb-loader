name: CI

on:
  push:
    tags:
      - '*'
    branches:
      - master
      - develop
  pull_request:

jobs:
  publish_docker:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app:
          - redshiftLoader
    steps:
      - name: Checkout Github
        uses: actions/checkout@v2
      - uses: coursier/cache-action@v6
      - name: Set up JDK 11 for loader and streaming transformer
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Get the latest Databricks JDBC driver
        run: |
          curl https://databricks-bi-artifacts.s3.us-east-2.amazonaws.com/simbaspark-drivers/jdbc/2.6.33/DatabricksJDBC42-2.6.33.1055.zip --output DatabricksJDBC42.jar.zip
          unzip DatabricksJDBC42.jar.zip
      - name: Docker login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Get current version
        id: ver
        run: echo "::set-output name=tag::${GITHUB_REF#refs/tags/}"
      - name: Get app package name
        id: packageName
        run: |
          export PACKAGE_NAME=$(sbt "project ${{ matrix.app }}" dockerAlias -Dsbt.log.noformat=true | sed -n '/\[info\]/ s/\[info\] //p' | tail -1 | tr -d '\n' | cut -d":" -f1)
          echo "::set-output name=package_name::$PACKAGE_NAME"
      - name: Get app base directory
        id: baseDirectory
        run: |
          export BASE_DIRECTORY=$(sbt "project ${{ matrix.app }}" baseDirectory -Dsbt.log.noformat=true | sed -n '/\[info\]/ s/\[info\] //p' | tail -1 | tr -d '\n')
          echo "::set-output name=directory::$BASE_DIRECTORY"
      - name: Get app base directory (distroless)
        id: baseDirectoryDistroless
        run: |
          export BASE_DIRECTORY_DISTROLESS=$(sbt "project ${{ matrix.app }}Distroless" baseDirectory -Dsbt.log.noformat=true | sed -n '/\[info\]/ s/\[info\] //p' | tail -1 | tr -d '\n')
          echo "::set-output name=directory::$BASE_DIRECTORY_DISTROLESS"
      - name: Stage the Docker distroless build
        run: sbt "project ${{ matrix.app }}Distroless" docker:stage
      - name: Docker metadata distroless
        id: distroless-meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ steps.packageName.outputs.package_name }}
          tags: |
            type=raw,value=latest-distroless,enable=${{ !contains(steps.ver.outputs.tag, 'rc') }}
            type=raw,value=${{ steps.ver.outputs.tag }}-distroless
          flavor: |
            latest=false
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Push distroless image
        uses: docker/build-push-action@v2
        with:
          context: ${{ steps.baseDirectoryDistroless.outputs.directory }}/target/docker/stage
          file: ${{ steps.baseDirectoryDistroless.outputs.directory }}/target/docker/stage/Dockerfile
          platforms: linux/amd64,linux/arm64/v8
          tags: ${{ steps.distroless-meta.outputs.tags }}
          push: true
